
services:
  # The proxy service intercepts and logs all LLM API calls
  llm-proxy:
    container_name: llm-proxy
    build:
      context: . # Build context is the project root
      dockerfile: llm-proxy/Dockerfile # Path relative to context
    image: llm-proxy-local # Optional: name the image
    restart: unless-stopped
    volumes:
      # Mount host CA certs for runtime reading
      - ./llm-proxy/certs:/certs_src:ro
      # Mount host directory for sharing public key OUT
      - ./llm-proxy/shared_identity:/shared_identity # Needs RW for proxy
      # Mount persistent storage for proxy's private key IN/OUT
      - proxy-data:/data
      # Mount directory for receiving config/keys FROM p2p-node (optional)
      - ./llm-proxy/node_config:/node_config:ro
    networks:
      # Network dynamic python servers will join
      - llm-network
    # Expose port only if direct external access needed (maybe not)
    ports:
      - "8080:8080"

  # The Python LLM server that makes API calls
  python-llm-server:
    build:
      context: ./agents/python/execute_with_memories
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Route all HTTP and HTTPS traffic through our proxy
      - HTTP_PROXY=http://llm-proxy:8080
      - HTTPS_PROXY=http://llm-proxy:8080
      # Don't proxy requests to localhost or the proxy itself
      - NO_PROXY=localhost,127.0.0.1,llm-proxy
      # Point requests library to the proxy's CA certificate
      - REQUESTS_CA_BUNDLE=/certs/hudsucker.cer
      # Set SSL environment variables for Python
      - SSL_CERT_FILE=/certs/hudsucker.cer
    volumes:
      - ./llm-proxy/certs:/certs:ro
    networks:
      - llm-network
    depends_on:
      - llm-proxy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for proxy CA certificate...'
        while [ ! -f /certs/hudsucker.cer ]; do
          echo 'CA certificate not found, waiting...'
          sleep 1
        done
        echo 'Found CA certificate!'
        echo 'Certificate details:'
        openssl x509 -in /certs/hudsucker.cer -text -noout | grep -E 'Subject:|DNS:|Issuer:|Validity'
        echo 'Starting Python server...'
        python main.py
      "

volumes:
  proxy-data: # Persistent volume for private key

networks:
  llm-network:
    driver: bridge
    # Name can be customized if needed