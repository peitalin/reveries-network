
# default recipe to display help information
default:
  @just --list

# Run runtime crate
run-runtime:
    cargo run --bin runtime

run-cait:
    cargo run --release --bin cait -- 100 300 1000000


# Runs node 1
node1:
    echo 'Running Node 1';
    cargo run --bin rpc -- \
        --secret-key-seed 1 \
        --rpc-port 8001

# Runs node 2
node2:
    @echo 'Running Node 2';
    cargo run --bin rpc -- \
        --secret-key-seed 2 \
        --rpc-port 8002

# Runs node 3
node3:
    @echo 'Running Node 3';
    cargo run --bin rpc -- \
        --secret-key-seed 3 \
        --rpc-port 8003

# Runs node 4
node4:
    @echo 'Running Node 4';
    cargo run --bin rpc -- \
        --secret-key-seed 4 \
        --rpc-port 8004

# Runs node 5
node5:
    @echo 'Running Node 5';
    cargo run --bin rpc -- \
        --secret-key-seed 5 \
        --rpc-port 8005



spawn-agent node_port:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:{{node_port}} \
        spawn-agent \
        --total-frags 3 \
        --threshold 2




peers1 agent_nonce:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:8001 \
        get-kfrag-broadcast-peers \
        --agent-name beatrix \
        --agent-nonce {{agent_nonce}}

peers2 agent_nonce:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:8002 \
        get-kfrag-broadcast-peers \
        --agent-name beatrix \
        --agent-nonce {{agent_nonce}}


peers3 agent_nonce:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:8003 \
        get-kfrag-broadcast-peers \
        --agent-name beatrix \
        --agent-nonce {{agent_nonce}}

peers4 agent_nonce:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:8004 \
        get-kfrag-broadcast-peers \
        --agent-name beatrix \
        --agent-nonce {{agent_nonce}}

peers5 agent_nonce:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:8005 \
        get-kfrag-broadcast-peers \
        --agent-name beatrix \
        --agent-nonce {{agent_nonce}}



trigger-node-failure node_port:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:{{node_port}} \
        trigger-node-failure \

get-node-states:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:8001 \
        get-node-states \
        --ports 8001,8002,8003,8004


test-rpc node_port:
    curl -X POST http://0.0.0.0:{{node_port}} \
        -H "Content-Type: application/json" \
        -d '{"jsonrpc":"2.0","method":"get_node_state","params":[],"id":1}'


subscribe-heartbeat node_port:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:{{node_port}} \
        subscribe-heartbeat


telemetry:
    cargo run --bin telemetry