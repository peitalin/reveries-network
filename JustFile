# default recipe to display help information
default:
  @just --list

# ===========================
# ===== Local Commands ======
# ===========================

run-local-nodes:
    docker-compose -f ./docker-compose-6-nodes.yaml up --build

# Runs node 1 locally
node1:
    cargo run --bin rpc -- \
        --secret-key-seed 1 \
        --rpc-port 9901 \
        --listen-address "/ip4/0.0.0.0/tcp/9001" \
        --bootstrap-peers "/ip4/127.0.0.1/tcp/9002/p2p/12D3KooWH3uVF6wv47WnArKHk5p6cvgCJEb74UTmxztmQDc298L3"

# Runs node 2 locally
node2:
    cargo run --bin rpc -- \
        --secret-key-seed 2 \
        --rpc-port 9902 \
        --listen-address "/ip4/0.0.0.0/tcp/9002" \
        --bootstrap-peers "/ip4/127.0.0.1/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

# Runs node 3 locally
node3:
    cargo run --bin rpc -- \
        --secret-key-seed 3 \
        --rpc-port 9903 \
        --listen-address "/ip4/0.0.0.0/tcp/9003" \
        --bootstrap-peers "/ip4/127.0.0.1/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

# Runs node 4 locally
node4:
    cargo run --bin rpc -- \
        --secret-key-seed 4 \
        --rpc-port 9904 \
        --listen-address "/ip4/0.0.0.0/tcp/9004" \
        --bootstrap-peers "/ip4/127.0.0.1/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

# Runs node 5 locally
node5:
    cargo run --bin rpc -- \
        --secret-key-seed 5 \
        --rpc-port 9905 \
        --listen-address "/ip4/0.0.0.0/tcp/9005" \
        --bootstrap-peers "/ip4/127.0.0.1/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

# Runs node 6 locally
node6:
    cargo run --bin rpc -- \
        --secret-key-seed 6 \
        --rpc-port 9906 \
        --listen-address "/ip4/0.0.0.0/tcp/9006" \
        --bootstrap-peers "/ip4/127.0.0.1/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

# Spawns agent in a local node with secret keys, PRE encrypts it, and sends
# the key fragments to peer nodes
spawn-agent node_port:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:{{node_port}} \
        spawn-agent \
        --threshold 2 \
        --total-frags 3

# Trigger a node failure (to trigger heartbeat failure and agent respawn)
trigger-node-failure node_port:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:{{node_port}} \
        trigger-node-failure \

get-node-states:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:9901 \
        get-node-states \
        --ports 9901,9902,9903,9904

subscribe-heartbeat node_port:
    cargo run --bin cmd -- \
        --rpc-server-address 0.0.0.0:{{node_port}} \
        subscribe-heartbeat

# Run heartbeat monitoring app
run-react-app:
    cd ./app-monitor && pnpm install && pnpm run dev

# ===========================
# ====== TEE Deployment ======
# ===========================

build-tdx:
    cargo build --features tdx_enabled

terraform-init:
    cd ./terraform && terraform init -upgrade && terraform plan

terraform-apply:
    cd ./terraform && terraform apply

terraform-destroy:
    cd terraform && terraform destroy \
    -target=google_compute_instance.tdx_instances \
    -target=google_compute_firewall.allow_rpc_ports

test-rpc-prod:
    cargo run --bin cmd -- \
        --rpc-server-address 35.198.200.224:9901 \
        get-node-states --ports 9901

# The following commands are execute only on TDX-enabled VMs

test-runtime-tee:
    cargo run --bin runtime --features tdx_enabled -- test-tee

test-runtime-tee2:
    cargo build --features tdx_enabled
    sudo ./target/debug/runtime test-tee

# The followin runs TEE nodes with specific bootstrap node IPs
# (update to match actual node1 and node2 IPs on GCP)

# Runs node1 in Production with node2's IP as bootstrap node
node1-prod:
    sudo cargo build --features tdx_enabled
    sudo ./target/debug/rpc \
        --secret-key-seed 1 \
        --rpc-port 9901 \
        --listen-address "/ip4/0.0.0.0/tcp/9001" \
        --bootstrap-peers "/ip4/35.240.229.229/tcp/9002/p2p/12D3KooWH3uVF6wv47WnArKHk5p6cvgCJEb74UTmxztmQDc298L3"

# Runs node2 in Production with node1's IP as bootstrap node
node2-prod:
    sudo cargo build --features tdx_enabled
    sudo ./target/debug/rpc \
        --secret-key-seed 2 \
        --rpc-port 9902 \
        --listen-address "/ip4/0.0.0.0/tcp/9002" \
        --bootstrap-peers "/ip4/35.198.200.224/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

node3-prod:
    sudo cargo build --features tdx_enabled
    sudo ./target/debug/rpc \
        --secret-key-seed 3 \
        --rpc-port 9903 \
        --listen-address "/ip4/0.0.0.0/tcp/9003" \
        --bootstrap-peers "/ip4/35.198.200.224/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

node4-prod:
    sudo cargo build --features tdx_enabled
    sudo ./target/debug/rpc \
        --secret-key-seed 4 \
        --rpc-port 9904 \
        --listen-address "/ip4/0.0.0.0/tcp/9004" \
        --bootstrap-peers "/ip4/35.198.200.224/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

node5-prod:
    sudo cargo build --features tdx_enabled
    sudo ./target/debug/rpc \
        --secret-key-seed 5 \
        --rpc-port 9905 \
        --listen-address "/ip4/0.0.0.0/tcp/9005" \
        --bootstrap-peers "/ip4/35.198.200.224/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

node6-prod:
    sudo cargo build --features tdx_enabled
    sudo ./target/debug/rpc \
        --secret-key-seed 6 \
        --rpc-port 9906 \
        --listen-address "/ip4/0.0.0.0/tcp/9006" \
        --bootstrap-peers "/ip4/35.198.200.224/tcp/9001/p2p/12D3KooWPjceQrSwdWXPyLLeABRXmuqt69Rg3sBYbU1Nft9HyQ6X"

# Spawns an agent in node
spawn-agent-prod:
    cargo run --bin cmd -- \
        --rpc-server-address 35.198.200.224:9901 \
        spawn-agent \
        --threshold 2 \
        --total-frags 3

# ======================
# ===== E2E Tests ======
# ======================

# Test: Spawns an agent (with API KEY and private keys) then proxy re-encrypts
# the API keys snd splits the key fragments between TEE nodes.
# It then triggers node failure (heartbeat failure), prompting respawn.
# Peer nodes then use threshold proxy re-encryption to respawn
# the agent in a new TEE 'vessel' with the original API KEY and private keys
test-agent-respawn-after-failure:
    cargo test --package network-tests \
        --test respawn_test -- test_agent_respawn_after_failure \
        --show-output

# Test: proxy re-encrypts an API KEY, then delegates it to another TEE node
# to make queries, and tracks the token usage data in the llm-proxy (separate docker network)
test-api-key-delegation:
    cd llm-proxy && sh generate_ca.sh && cd ../ && \
    docker-compose -f ./docker-compose-llm-proxy-test.yml down && \
    cargo test --package network-tests \
        --test api_key_delegation_test \
        -- unpaid_test::test_api_key_delegation_ecdsa \
        --show-output

